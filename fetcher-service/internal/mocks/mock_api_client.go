// Code generated by MockGen. DO NOT EDIT.
// Source: internal/worker/ports/api_client_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/worker/ports/api_client_port.go -destination=internal/mocks/mock_api_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/victoragudo/hotel-management-system/fetcher-service/internal/worker/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockAPIClientPort is a mock of APIClientPort interface.
type MockAPIClientPort struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClientPortMockRecorder
	isgomock struct{}
}

// MockAPIClientPortMockRecorder is the mock recorder for MockAPIClientPort.
type MockAPIClientPortMockRecorder struct {
	mock *MockAPIClientPort
}

// NewMockAPIClientPort creates a new mock instance.
func NewMockAPIClientPort(ctrl *gomock.Controller) *MockAPIClientPort {
	mock := &MockAPIClientPort{ctrl: ctrl}
	mock.recorder = &MockAPIClientPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIClientPort) EXPECT() *MockAPIClientPortMockRecorder {
	return m.recorder
}

// FetchHotelData mocks base method.
func (m *MockAPIClientPort) FetchHotelData(ctx context.Context, hotelId int64) (*dto.HotelAPIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHotelData", ctx, hotelId)
	ret0, _ := ret[0].(*dto.HotelAPIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchHotelData indicates an expected call of FetchHotelData.
func (mr *MockAPIClientPortMockRecorder) FetchHotelData(ctx, hotelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHotelData", reflect.TypeOf((*MockAPIClientPort)(nil).FetchHotelData), ctx, hotelId)
}

// FetchHotelReviews mocks base method.
func (m *MockAPIClientPort) FetchHotelReviews(ctx context.Context, hotelID int64, options *dto.ReviewFetchOptions) (*dto.ReviewDataList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHotelReviews", ctx, hotelID, options)
	ret0, _ := ret[0].(*dto.ReviewDataList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchHotelReviews indicates an expected call of FetchHotelReviews.
func (mr *MockAPIClientPortMockRecorder) FetchHotelReviews(ctx, hotelID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHotelReviews", reflect.TypeOf((*MockAPIClientPort)(nil).FetchHotelReviews), ctx, hotelID, options)
}

// FetchTranslations mocks base method.
func (m *MockAPIClientPort) FetchTranslations(ctx context.Context, hotelID string, options *dto.TranslationFetchOptions) (*dto.TranslationAPIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTranslations", ctx, hotelID, options)
	ret0, _ := ret[0].(*dto.TranslationAPIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTranslations indicates an expected call of FetchTranslations.
func (mr *MockAPIClientPortMockRecorder) FetchTranslations(ctx, hotelID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTranslations", reflect.TypeOf((*MockAPIClientPort)(nil).FetchTranslations), ctx, hotelID, options)
}
