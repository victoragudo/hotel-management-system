// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/queue/rabbitmq_consumer.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/queue/rabbitmq_consumer.go -destination=internal/mocks/mock_consumer.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	amqp091 "github.com/rabbitmq/amqp091-go"
	gomock "go.uber.org/mock/gomock"
)

// MockConsumerPort is a mock of ConsumerPort interface.
type MockConsumerPort struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerPortMockRecorder
	isgomock struct{}
}

// MockConsumerPortMockRecorder is the mock recorder for MockConsumerPort.
type MockConsumerPortMockRecorder struct {
	mock *MockConsumerPort
}

// NewMockConsumerPort creates a new mock instance.
func NewMockConsumerPort(ctrl *gomock.Controller) *MockConsumerPort {
	mock := &MockConsumerPort{ctrl: ctrl}
	mock.recorder = &MockConsumerPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerPort) EXPECT() *MockConsumerPortMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConsumerPort) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConsumerPortMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConsumerPort)(nil).Close))
}

// Consume mocks base method.
func (m *MockConsumerPort) Consume() (<-chan amqp091.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume")
	ret0, _ := ret[0].(<-chan amqp091.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockConsumerPortMockRecorder) Consume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockConsumerPort)(nil).Consume))
}

// HealthCheck mocks base method.
func (m *MockConsumerPort) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockConsumerPortMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockConsumerPort)(nil).HealthCheck))
}
