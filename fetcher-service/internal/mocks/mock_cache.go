// Code generated by MockGen. DO NOT EDIT.
// Source: internal/worker/ports/cache_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/worker/ports/cache_port.go -destination=internal/mocks/mock_cache.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCachePort is a mock of CachePort interface.
type MockCachePort struct {
	ctrl     *gomock.Controller
	recorder *MockCachePortMockRecorder
	isgomock struct{}
}

// MockCachePortMockRecorder is the mock recorder for MockCachePort.
type MockCachePortMockRecorder struct {
	mock *MockCachePort
}

// NewMockCachePort creates a new mock instance.
func NewMockCachePort(ctrl *gomock.Controller) *MockCachePort {
	mock := &MockCachePort{ctrl: ctrl}
	mock.recorder = &MockCachePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCachePort) EXPECT() *MockCachePortMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCachePort) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCachePortMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCachePort)(nil).Close))
}

// Get mocks base method.
func (m *MockCachePort) Get(ctx context.Context, key string, dest any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, dest)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCachePortMockRecorder) Get(ctx, key, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCachePort)(nil).Get), ctx, key, dest)
}

// Set mocks base method.
func (m *MockCachePort) Set(ctx context.Context, key string, value any, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCachePortMockRecorder) Set(ctx, key, value, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCachePort)(nil).Set), ctx, key, value, ttl)
}
