// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/search/search.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/search/search.go -destination=internal/mocks/mock_search.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	hotel "github.com/victoragudo/hotel-management-system/search-service/internal/domain/hotel"
	search "github.com/victoragudo/hotel-management-system/search-service/internal/domain/search"
	gomock "go.uber.org/mock/gomock"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
	isgomock struct{}
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// ClearIndex mocks base method.
func (m *MockEngine) ClearIndex(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearIndex", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearIndex indicates an expected call of ClearIndex.
func (mr *MockEngineMockRecorder) ClearIndex(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearIndex", reflect.TypeOf((*MockEngine)(nil).ClearIndex), ctx)
}

// DeleteHotel mocks base method.
func (m *MockEngine) DeleteHotel(ctx context.Context, hotelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHotel", ctx, hotelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHotel indicates an expected call of DeleteHotel.
func (mr *MockEngineMockRecorder) DeleteHotel(ctx, hotelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHotel", reflect.TypeOf((*MockEngine)(nil).DeleteHotel), ctx, hotelID)
}

// GetFacets mocks base method.
func (m *MockEngine) GetFacets(ctx context.Context) (*search.Facets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFacets", ctx)
	ret0, _ := ret[0].(*search.Facets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFacets indicates an expected call of GetFacets.
func (mr *MockEngineMockRecorder) GetFacets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFacets", reflect.TypeOf((*MockEngine)(nil).GetFacets), ctx)
}

// GetIndexStats mocks base method.
func (m *MockEngine) GetIndexStats(ctx context.Context) (*search.IndexStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexStats", ctx)
	ret0, _ := ret[0].(*search.IndexStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexStats indicates an expected call of GetIndexStats.
func (mr *MockEngineMockRecorder) GetIndexStats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexStats", reflect.TypeOf((*MockEngine)(nil).GetIndexStats), ctx)
}

// GetSuggestions mocks base method.
func (m *MockEngine) GetSuggestions(ctx context.Context, query string, limit int) ([]*search.Suggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuggestions", ctx, query, limit)
	ret0, _ := ret[0].([]*search.Suggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestions indicates an expected call of GetSuggestions.
func (mr *MockEngineMockRecorder) GetSuggestions(ctx, query, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestions", reflect.TypeOf((*MockEngine)(nil).GetSuggestions), ctx, query, limit)
}

// HealthCheck mocks base method.
func (m *MockEngine) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockEngineMockRecorder) HealthCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockEngine)(nil).HealthCheck), ctx)
}

// Index mocks base method.
func (m *MockEngine) Index(ctx context.Context, hotels []*hotel.Hotel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", ctx, hotels)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockEngineMockRecorder) Index(ctx, hotels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockEngine)(nil).Index), ctx, hotels)
}

// Search mocks base method.
func (m *MockEngine) Search(ctx context.Context, params search.Params) (*search.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, params)
	ret0, _ := ret[0].(*search.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockEngineMockRecorder) Search(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockEngine)(nil).Search), ctx, params)
}

// UpdateHotel mocks base method.
func (m *MockEngine) UpdateHotel(ctx context.Context, arg1 *hotel.Hotel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHotel", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHotel indicates an expected call of UpdateHotel.
func (mr *MockEngineMockRecorder) UpdateHotel(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHotel", reflect.TypeOf((*MockEngine)(nil).UpdateHotel), ctx, arg1)
}
