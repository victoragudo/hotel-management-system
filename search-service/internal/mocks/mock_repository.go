// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/hotel/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/hotel/repository.go -destination=internal/mocks/mock_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	hotel "github.com/victoragudo/hotel-management-system/search-service/internal/domain/hotel"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, id)
}

// FindAll mocks base method.
func (m *MockRepository) FindAll(ctx context.Context, limit, offset int) ([]*hotel.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, limit, offset)
	ret0, _ := ret[0].([]*hotel.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRepositoryMockRecorder) FindAll(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository)(nil).FindAll), ctx, limit, offset)
}

// FindByHotelID mocks base method.
func (m *MockRepository) FindByHotelID(ctx context.Context, hotelID int64) (*hotel.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHotelID", ctx, hotelID)
	ret0, _ := ret[0].(*hotel.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHotelID indicates an expected call of FindByHotelID.
func (mr *MockRepositoryMockRecorder) FindByHotelID(ctx, hotelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHotelID", reflect.TypeOf((*MockRepository)(nil).FindByHotelID), ctx, hotelID)
}

// FindUpdatedAfter mocks base method.
func (m *MockRepository) FindUpdatedAfter(ctx context.Context, timestamp time.Time) ([]*hotel.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUpdatedAfter", ctx, timestamp)
	ret0, _ := ret[0].([]*hotel.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUpdatedAfter indicates an expected call of FindUpdatedAfter.
func (mr *MockRepositoryMockRecorder) FindUpdatedAfter(ctx, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUpdatedAfter", reflect.TypeOf((*MockRepository)(nil).FindUpdatedAfter), ctx, timestamp)
}

// Save mocks base method.
func (m *MockRepository) Save(ctx context.Context, arg1 *hotel.Hotel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, arg1)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, arg1 *hotel.Hotel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, arg1)
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetHotelByID mocks base method.
func (m *MockProvider) GetHotelByID(ctx context.Context, hotelID int64) (*hotel.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotelByID", ctx, hotelID)
	ret0, _ := ret[0].(*hotel.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotelByID indicates an expected call of GetHotelByID.
func (mr *MockProviderMockRecorder) GetHotelByID(ctx, hotelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotelByID", reflect.TypeOf((*MockProvider)(nil).GetHotelByID), ctx, hotelID)
}

// GetHotelReviews mocks base method.
func (m *MockProvider) GetHotelReviews(ctx context.Context, hotelID int64, reviewsCount int) ([]*hotel.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotelReviews", ctx, hotelID, reviewsCount)
	ret0, _ := ret[0].([]*hotel.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotelReviews indicates an expected call of GetHotelReviews.
func (mr *MockProviderMockRecorder) GetHotelReviews(ctx, hotelID, reviewsCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotelReviews", reflect.TypeOf((*MockProvider)(nil).GetHotelReviews), ctx, hotelID, reviewsCount)
}

// GetHotelTranslations mocks base method.
func (m *MockProvider) GetHotelTranslations(ctx context.Context, hotelID int64, languages []string) ([]*hotel.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotelTranslations", ctx, hotelID, languages)
	ret0, _ := ret[0].([]*hotel.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotelTranslations indicates an expected call of GetHotelTranslations.
func (mr *MockProviderMockRecorder) GetHotelTranslations(ctx, hotelID, languages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotelTranslations", reflect.TypeOf((*MockProvider)(nil).GetHotelTranslations), ctx, hotelID, languages)
}

// MockCacheRepository is a mock of CacheRepository interface.
type MockCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepositoryMockRecorder
	isgomock struct{}
}

// MockCacheRepositoryMockRecorder is the mock recorder for MockCacheRepository.
type MockCacheRepositoryMockRecorder struct {
	mock *MockCacheRepository
}

// NewMockCacheRepository creates a new mock instance.
func NewMockCacheRepository(ctrl *gomock.Controller) *MockCacheRepository {
	mock := &MockCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepository) EXPECT() *MockCacheRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCacheRepository) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheRepositoryMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacheRepository)(nil).Delete), ctx, key)
}

// Exists mocks base method.
func (m *MockCacheRepository) Exists(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockCacheRepositoryMockRecorder) Exists(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCacheRepository)(nil).Exists), ctx, key)
}

// Get mocks base method.
func (m *MockCacheRepository) Get(ctx context.Context, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheRepositoryMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheRepository)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockCacheRepository) Set(ctx context.Context, key string, value []byte, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheRepositoryMockRecorder) Set(ctx, key, value, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheRepository)(nil).Set), ctx, key, value, ttl)
}
